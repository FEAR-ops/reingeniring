name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]     # якщо гілка у тебе "master" – зміни
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # повна історія для SonarCloud

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: SonarScanner Begin
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
          dotnet sonarscanner begin `
            /k:FEAR-ops_reingeniring `
            /o:fear-ops `
            /d:sonar.token=${{ secrets.SONAR_TOKEN }} `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.xml" `
            /d:sonar.exclusions=**/bin/**,**/obj/** `
            /d:sonar.qualitygate.wait=true
        shell: pwsh

      - name: Restore
        run: dotnet restore NetSdrClient.sln   # заміни на свою .sln

      - name: Build
        run: dotnet build NetSdrClient.sln -c Release --no-restore

      # Якщо будеш додавати тести з coverage (opencover)
      # - name: Test with coverage
      #   run: |
      #     dotnet test YourTestProject/YourTestProject.csproj -c Release --no-build `
      #       /p:CollectCoverage=true `
      #       /p:CoverletOutput=TestResults/coverage.xml `
      #       /p:CoverletOutputFormat=opencover
      #   shell: pwsh

      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}
        shell: pwsh
