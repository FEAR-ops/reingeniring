name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]     # <- заміни на "main" якщо у тебе main
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: SonarScanner Begin
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
          dotnet sonarscanner begin `
            /d:sonar.projectKey="<YOUR_PROJECT_KEY>" `
            /d:sonar.organization="<YOUR_ORG_KEY>" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.xml" `
            /d:sonar.exclusions=**/bin/**,**/obj/** `
            /d:sonar.qualitygate.wait=true
        shell: pwsh

      - name: Restore
        run: dotnet restore YourSolution.sln

      - name: Build
        run: dotnet build YourSolution.sln -c Release --no-restore

      # optional: запускай тести і генеруй coverage в форматі opencover
      #- name: Test with coverage
      #  run: |
      #    dotnet test YourTestProject/YourTestProject.csproj -c Release --no-build `
      #      /p:CollectCoverage=true `
      #      /p:CoverletOutput=TestResults/coverage.xml `
      #      /p:CoverletOutputFormat=opencover
      #  shell: pwsh

      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
